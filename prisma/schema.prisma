generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "linux-musl"]
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Users {
    id                        String    @id @default(auto()) @map("_id") @db.ObjectId
    firstName                 String
    lastName                  String
    password                  String
    jobTitle                  String?
    dateOfBirth               String?
    phoneNumber               String?
    profilePhoto              String?
    email                     String    @unique
    isEmailVerified           Boolean   @default(false)
    stripeCustomerId          String?   @unique
    monthlySubscriptionStatus String?
    joinedOn                  DateTime? @default(now())
    subscriptionId            String?
    canAddLogo                Boolean?  @default(false)
    canAddBackground          Boolean?  @default(false)
    cardSlots                 Int?      @default(0)
    availableCardSlots        Int?      @default(0)
    otpToken                  String?   @unique
    roles                     Role[]    @default([USER])
    links                     Link[]
    markers                   Markers[]
}

model Cards {
    id              String    @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    title           String?
    about           String?
    email           String?
    uniqueId        String?
    activeStatus    Boolean   @default(true)
    cardImage       String?
    logoImage       String?
    backgroundImage String?
    cardBodyImage   String?
    shortName       String    @unique
    userId          String    @db.ObjectId
    links           Link[]
    marker          Marker?
    profileVisits   Int?
    addedToContacts Int?
    createdAt       DateTime? @default(now())
}

model RefreshTokens {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String
    token String @unique
}

model Markers {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    markerImage String
    markerFile  String
    uniqueId    String  @unique
    userId      String? @db.ObjectId
    user        Users?  @relation(fields: [userId], references: [id])
}

model StripeEvents {
    id    String   @id @default(auto()) @map("_id") @db.ObjectId
    time  DateTime @default(now())
    event String
}

model Analytics {
    id     String   @id @default(auto()) @map("_id") @db.ObjectId
    cardId String   @db.ObjectId
    readAt DateTime @default(now())
}

model LinkAnalytics {
    id       String @id @default(auto()) @map("_id") @db.ObjectId
    linkName String
    count    Int    @default(0)
    cardId   String @db.ObjectId
}

model ForgotPasswordTokens {
    id    String @id @default(auto()) @map("_id") @db.ObjectId
    email String
    token String @unique
}

enum MonthlySubscriptionStatus {
    active
    past_due
    unpaid
    canceled
    incomplete
    incomplete_expired
    trialing
    ended
}

enum Role {
    ADMIN
    USER
}

type Link {
    name String
    link String
}

type Marker {
    uniqueId    String?
    markerFile  String?
    markerImage String?
}
